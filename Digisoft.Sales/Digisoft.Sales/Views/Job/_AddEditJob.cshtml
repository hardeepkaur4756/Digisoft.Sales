@model Digisoft.Sales.Models.JobViewModel


    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        @if (Model.ViewType == "Display")
        {
            @*<div class="form-group d-flex">
                @Html.LabelFor(model => model.CreatedOn, htmlAttributes: new { @class = "control-label col-sm-3 col-md-2" })
                <div class="col-md-10">
                    @Html.DisplayFor(model => model.CreatedOn, new { htmlAttributes = new { @class = "form-control col-sm-9" } })
                    @Html.ValidationMessageFor(model => model.CreatedOn, "", new { @class = "text-danger" })
                </div>
            </div>*@

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.BiddingTitle, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.BiddingTitle, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.PlatformName, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.PlatformName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.AppliedUnderName, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.AppliedUnderName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.ProjectTypeName, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.ProjectTypeName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.DeveloperName, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.DeveloperName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.TeamLeadName, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.TeamLeadName, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.HiredOn, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @{
                        var appliedDate = Model.HiredOn != null ? Model.HiredOn.ToString("dd MMM yyyy") : "";
                        <label class="control-label"> @appliedDate </label>
                    }
                    @*@Html.DisplayFor(model => model.HiredDate, new { htmlAttributes = new { @class = "form-control" } })*@
                </div>
            </div>

            <div class="form-group d-flex">
                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-sm-3" })
                <div class="col-sm-9 text-break">
                    @Html.DisplayFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="text-right mt-2">
                <div class="">
                    <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Close</a>
                    @*<input type="button" value="Save" id="btnSave" class="btn btn-primary" />*@
                </div>
            </div>
        }
        else
        {
            @*<div class="form-group">
                @Html.LabelFor(model => model.CreatedOn, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreatedOn, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreatedOn, "", new { @class = "text-danger" })
                </div>
            </div>*@
            

            <div class="form-group">
                @Html.LabelFor(model => model.BiddingTitle, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.BiddingId, new SelectList(Model.Biddings, "Value", "Text", ""), htmlAttributes: new {@class = "form-control bidding", id = "ddlBidding" })
                    @Html.ValidationMessageFor(model => model.BiddingId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.ClientId, new SelectList(Model.Clients, "Value", "Text", ""), "- Please select Client", htmlAttributes: new { @class = "form-control", id = "ddlClient" })
                    @Html.ValidationMessageFor(model => model.ClientId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PlatformName, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.PlatformId, new SelectList(Model.Platforms, "Value", "Text", ""), "- Please select Platform", htmlAttributes: new { @class = "form-control", id = "ddlPlatform" })
                    @Html.ValidationMessageFor(model => model.PlatformId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AppliedUnderName, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.AppliedUnderId, new SelectList(Model.AppliedUnders, "Value", "Text", ""), "- Please select AppliedUnder", htmlAttributes: new { @class = "form-control", id = "ddlAppliedUnder" })
                    @Html.ValidationMessageFor(model => model.AppliedUnderId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ProjectTypeName, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.ProjectTypeId, new SelectList(Model.ProjectTypes, "Value", "Text", ""), "- Please select Project Type", htmlAttributes: new { @class = "form-control", id = "ddlProjectType" })
                    @Html.ValidationMessageFor(model => model.ProjectTypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DeveloperName, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.DeveloperId, new SelectList(Model.Developers, "Value", "Text", ""), "- Please select Developer", htmlAttributes: new { @class = "form-control", id = "ddlDeveloper" })
                    @Html.ValidationMessageFor(model => model.DeveloperId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TeamLeadName, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.DropDownListFor(x => Model.TeamLeadId, new SelectList(Model.TeamLeaders, "Value", "Text", ""), "- Please select Team Lead", htmlAttributes: new { @class = "form-control", id = "ddlTeamLead" })
                    @Html.ValidationMessageFor(model => model.TeamLeadId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HiredOn, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.HiredOn, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HiredOn, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="text-right mt-2">
                <div class="">
                    <a href="#" class="btn btn-secondary" data-dismiss="modal" aria-hidden="true">Cancel</a>
                    <input type="button" value="Save" id="btnSave" class="btn btn-primary" />
                </div>
            </div>
        }
    </div>

    <script>
        $(document).ready(function () {

            $('#ddlBidding').attr('data-live-search', true);
            $('.bidding').selectpicker(
                {
                    width: '100%',
                    title: '- Please select bidding',
                    size: 10
                });


            $("#HiredOn").datepicker({
                autoclose: true,
                format: "yyyy-mm-dd"
            });
            if ($("#Id").val() == 0) {
                $("#HiredOn").val("");
            }
        });
        $("#Price").keyup(function (evt) {
            var self = $(this);
            self.val(self.val().replace(/[^0-9\.]/g, ''));
            if ((evt.which != 46 || self.val().indexOf('.') != -1) && (evt.which < 48 || evt.which > 57)) {
                evt.preventDefault();
            }
        });
        $("#btnSave").click(function () {
            var userId = $("#ddlUser").val();
            var biddingId = $("#ddlBidding").val();
            var platformId = $("#ddlPlatform").val();
            var AppliedUnderId = $("#ddlAppliedUnder").val();
            var DeveloperId = $("#ddlDeveloper").val();
            var ProjectTypeId = $("#ddlProjectType").val();
            var teamLeadId = $("#ddlTeamLead").val();
            var clientId = $("#ddlClient").val();
            var Price = $("#Price").val();
            var hiredOn = $("#HiredOn").val();
            var notes = $("#Notes").val();
            var vm = {};
            vm.Id = $("#Id").val();
            vm.BiddingId = biddingId;
            vm.PlatformId = platformId;
            vm.TeamLeadId = teamLeadId;
            vm.AppliedUnderId = AppliedUnderId;
            vm.DeveloperId = DeveloperId;
            vm.ProjectTypeId = ProjectTypeId;
            vm.ClientId = clientId;
            vm.Price = Price;
            vm.Notes = notes;
            vm.HiredOn = hiredOn;
            var validate = true;
            if (biddingId == undefined || biddingId == "") {
                validate = false;
                $("#ddlBidding").addClass("error");
            } else {
                $("#ddlBidding").removeClass("error");
            }
            if (platformId == undefined || platformId == "") {
                validate = false;
                $("#ddlPlatform").addClass("error");
            } else {
                $("#ddlPlatform").removeClass("error");
            }
            if (AppliedUnderId == undefined || AppliedUnderId == "") {
                validate = false;
                $("#ddlAppliedUnder").addClass("error");
            } else {
                $("#ddlAppliedUnder").removeClass("error");
            }
            if (teamLeadId == undefined || teamLeadId == "") {
                validate = false;
                $("#ddlTeamLead").addClass("error");
            } else {
                $("#ddlTeamLead").removeClass("error");
            }
            if (DeveloperId == undefined || DeveloperId == "") {
                validate = false;
                $("#ddlDeveloper").addClass("error");
            } else {
                $("#ddlDeveloper").removeClass("error");
            }
            if (ProjectTypeId == undefined || ProjectTypeId == "") {
                validate = false;
                $("#ddlProjectType").addClass("error");
            } else {
                $("#ddlProjectType").removeClass("error");
            }
            if (clientId == undefined || clientId == "") {
                validate = false;
                $("#ddlClient").addClass("error");
            } else {
                $("#ddlClient").removeClass("error");
            }
            if (Price == undefined || Price == "" || Price == "0.00" || Price == "0") {
                validate = false;
                $("#Price").addClass("error");
            } else {
                $("#Price").removeClass("error");
            }
            if (hiredOn == undefined || hiredOn == "") {
                validate = false;
                $("#HiredOn").addClass("error");
            } else {
                $("#HiredOn").removeClass("error");
            }
            if (validate == true) {
                loader();
                $.ajax({
                    type: "Post",
                    url: "/Job/InsertUpdate",
                    dataType: "json",
                    contentType: "application/json",
                    data: JSON.stringify(vm),
                    success: function (result) {
                        if (result.Success) {
                            $('#myModal').hide();
                            removeLoader();
                            notificationHelper.ShowSuccess(result.Message);
                            setTimeout(function () {
                                location.href = "/Job/Index";
                            }, 1000);
                        } else {
                            notificationHelper.ShowError("Sorry, An error occurred!");
                            removeLoader();
                        }
                    },
                    failure: function (result) {
                        notificationHelper.ShowError(result.responseText);
                        removeLoader();
                    }
                });
            }
        });
    </script>

